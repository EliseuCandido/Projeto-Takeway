!SESSION 2022-10-21 19:50:23.474 -----------------------------------------------
eclipse.buildId=4.24.0.I20220607-0700
java.version=17.0.4.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.java.product -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product -data C:\Users\atec\eclipse-workspace\Projeto de Java TESTE -product org.eclipse.epp.package.java.product

!ENTRY org.eclipse.jface 2 0 2022-10-21 19:50:26.821
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-10-21 19:50:26.821
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@289a4b90,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1a3c4b3e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-10-21 19:50:26.821
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4746fb8c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3be46d9c,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-10-21 19:50:30.071
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.oomph.ui 4 0 2022-10-21 19:50:35.524
!MESSAGE java.lang.ExceptionInInitializerError
!STACK 0
java.lang.ExceptionInInitializerError
	at org.eclipse.oomph.setup.ui.recorder.RecorderManager.<clinit>(RecorderManager.java:121)
	at org.eclipse.oomph.setup.ui.SetupUIPlugin.performStartup(SetupUIPlugin.java:216)
	at org.eclipse.oomph.setup.ui.EarlyStartup.earlyStartup(EarlyStartup.java:23)
	at org.eclipse.oomph.internal.ui.EarlyStart.run(EarlyStart.java:119)
	at org.eclipse.oomph.internal.ui.EarlyStart$1.run(EarlyStart.java:98)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.lang.NullPointerException: Cannot invoke "org.osgi.framework.BundleContext.getServiceReference(java.lang.Class)" because "context" is null
	at org.eclipse.oomph.p2.internal.core.AgentManagerImpl.getCurrentAgent(AgentManagerImpl.java:169)
	at org.eclipse.oomph.p2.core.P2Util.getCurrentProvisioningAgent(P2Util.java:112)
	at org.eclipse.oomph.setup.internal.core.util.SetupCoreUtil.<clinit>(SetupCoreUtil.java:157)
	... 6 more
!SESSION 2022-12-14 00:50:35.818 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-14 00:50:49.495
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 00:50:49.495
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 00:50:49.495
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-14 00:50:51.852
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.e4.ui.workbench 2 0 2022-12-14 00:50:51.874
!MESSAGE Removing PartDescriptorImpl with the "org.eclipse.eclemma.ui.CoverageView" id and the "Coverage" label.It points to the non available "bundleclass://org.eclipse.ui.workbench/org.eclipse.ui.internal.e4.compatibility.CompatibilityView" class. Bundle might have been uninstalled

!ENTRY org.eclipse.e4.ui.workbench 2 0 2022-12-14 00:50:51.889
!MESSAGE Removing PartDescriptorImpl with the "org.eclipse.tips.ide.tipPart" id and the "Tip of the Day" label.It points to the non available "bundleclass://org.eclipse.tips.ide/org.eclipse.tips.ide.internal.TipPart" class. Bundle might have been uninstalled
!SESSION 2022-12-14 00:52:20.113 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-14 00:52:25.349
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 00:52:25.349
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-14 00:52:25.350
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-14 00:52:28.585
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2022-12-14 04:27:56.120
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): gerador() [in CreditCard [in [Working copy] CreditCard.java [in <default> [in <project root> [in src]]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.Member.getFlags(Member.java:172)
	at org.eclipse.jdt.internal.corext.util.JdtFlags.isPrivate(JdtFlags.java:157)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkSuperImplementationDetector.isOverriddenMethod(JavaElementHyperlinkSuperImplementationDetector.java:57)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkSuperImplementationDetector.addHyperlinks(JavaElementHyperlinkSuperImplementationDetector.java:44)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:136)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2022-12-14 04:27:56.121
!MESSAGE gerador() [in CreditCard [in [Working copy] CreditCard.java [in <default> [in <project root> [in src]]]]] does not exist

!ENTRY org.eclipse.jdt.ui 4 10001 2022-12-14 04:27:56.122
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Error in Java Model (code 969): gerador() [in CreditCard [in [Working copy] CreditCard.java [in <default> [in <project root> [in src]]]]] does not exist
	at org.eclipse.jdt.internal.core.JavaElement.newNotPresentException(JavaElement.java:574)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:617)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:328)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SourceMethod.getReturnType(SourceMethod.java:204)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkReturnTypeDetector.addHyperlinks(JavaElementHyperlinkReturnTypeDetector.java:43)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:136)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 1 org.eclipse.jdt.core 4 969 2022-12-14 04:27:56.122
!MESSAGE gerador() [in CreditCard [in [Working copy] CreditCard.java [in <default> [in <project root> [in src]]]]] does not exist
!SESSION 2022-12-15 02:00:59.523 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-15 02:03:39.052
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 02:03:39.052
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 02:03:39.052
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-15 02:03:43.703
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-15 03:41:00.488 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-15 03:41:11.310
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 03:41:11.310
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 03:41:11.310
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-15 03:41:18.575
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-12-15 16:37:38.240 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-15 16:37:54.443
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 16:37:54.443
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 16:37:54.443
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-15 16:37:59.029
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 17:49:25.568
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.Scanner;
import javax.swing.JFrame;
import java.io.IOException;

public class Takeway {

	public static void main(String[] args) {
		/*
	Autenticacao autenticacao = new Autenticacao();
		
    autenticacao.login();
  */
    
	ProdutoMenu P1 = new ProdutoMenu ();

	
	/*
	P1.hamburguer();
	P1.bebida();
	
	P1.acompanhamento();
	
	System.out.println("Deseja adicionar sobremesa:\n"
			+ "1 - Sim \n"
			+ "0 - Nao \n");
	
		Scanner entrada = new Scanner(System.in);   	
		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		menu.sobremesa();
		break;
		case 0:
		break;
		}
    */
	  /* COMENTARIOS REPETIDOS
	   *  A - Se escolha do Consumidor nao for VOLTAR, entao ele entra nesse if  
	   *  
	   *  B - Quando aperta o botao VOLTAR tira a atribuição de valor da escolha. (Para não ficar em loop) 
	   */
	
	 P1.LoginP();
	 do {P1.escolhahamburguer = ' '; P1.escolhasobremesa = ' ';
     P1.inicio();           // Tela Principal 
     
     if (P1.escolhaopcao == 1){ // Opção 1 == Novidades ,
    	P1.CartaoP();

     }
     
	 else if (P1.escolhaopcao == 2) {  // Opção 2 == Produtos , Vai para parte da escolha do produto
		 P1.opcoes();
		 if (P1.escolhaConta == 2){
			 break;
		 }
         
     }
     
	 else if (P1.escolhaopcao == 3) {  // Opção 3 == Menu , Vai fazer a sequencia OBRIGATORIA --> Hamburguer - Bebida - Acompanhamento - Sobremesa
			do {P1.escolhabebida = ' ';  //COMENTARIO B
			if (P1.escolhahamburguer > 0 && P1.escolhahamburguer <= 5 ) {
				if (P1.escolhahamburguer == 1) {
					P1.hamCHI -= 1;}
				else if (P1.escolhahamburguer == 2) {
					P1.hamTAS -= 1;}
				else if (P1.escolhahamburguer == 3) {
					P1.hamCBO -= 1;}
				else if (P1.escolhahamburguer == 4) {
					P1.hamROY -= 1;}
				else if (P1.escolhahamburguer == 5) {
					P1.hamCHE -= 1;}
			}
			P1.hamburguer(); 
			
			 if (P1.escolhahamburguer > 0 && P1.escolhahamburguer <= 5 )  //COMENTARIO A 
				do {P1.escolhaacompanhamento = ' '; //COMENTARIO B
				
				if (P1.escolhabebida > 0 && P1.escolhabebida <= 5 ) {
					if (P1.escolhabebida == 1) {
						P1.bebAGU -= 1;}
					else if (P1.escolhabebida == 2) {
						P1.bebCOL -= 1;}
					else if (P1.escolhabebida == 3) {
						P1.bebICE -= 1;}
					else if (P1.escolhabebida == 4) {
						P1.bebMON -= 1;}
					else if (P1.escolhabebida == 5) {
						P1.bebSUM -= 1;}
				}
				P1.bebida();
			
			    if (P1.escolhabebida != 0 && P1.escolhabebida <= 5 ) //COMENTARIO A 
			    	do{P1.escolhasobremesa = ' '; //COMENTARIO B
			    	
					if (P1.escolhaacompanhamento > 0 && P1.escolhaacompanhamento <= 3 ) {
						if (P1.escolhaacompanhamento == 1) {
							P1.acBAT -= 1;}
						else if (P1.escolhaacompanhamento == 2) {
							P1.acSOP -= 1;}
						else if (P1.escolhaacompanhamento == 3) {
							P1.acSAL -= 1;}
					}
			    		P1.acompanhamento();
			    
				    if (P1.escolhaacompanhamento > 0 && P1.escolhaacompanhamento <= 4 ) { //COMENTARIO A 
				    	P1.sobremesa(); // Vai para sobremesas
					    if (P1.escolhasobremesa > 0 && P1.escolhasobremesa <= 4 ) { //Verificar se o cliente finalizou a conta
					    	 P1.menucont += 1;
							 P1.menuPreco += P1.hamM;
							 P1.descontomenu += P1.hamM + P1.bebM + P1.acoM + P1.sobM;}
					    	}
		    
		      } while (P1.escolhasobremesa == 0); 
		    }while (P1.escolhaacompanhamento == 0); 
		}while (P1.escolhabebida == 0); 	
       }
     
	 if (P1.escolhaopcao == 4) {
		 P1.PagamentoMenu(); }

	  } while (P1.escolhahamburguer == 0 || P1.escolhaopcao == 2 && 		 if (P1.escolhaConta == 2){
			 break;
		 }|| P1.escolhaopcao == 1 || P1.escolhaopcao == 4 || (P1.escolhasobremesa > 0 && P1.escolhasobremesa <= 4)); 
	 
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 17:49:25.569
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 17:49:25.570
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:20:49.153
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:20:49.154
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:20:49.154
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:20:51.002
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:20:51.003
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:20:51.004
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:20:51.395
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:20:51.396
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:20:51.397
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:25:53.108
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:25:53.109
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:25:53.109
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:25:58.197
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:25:58.198
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:25:58.198
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:25:59.054
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:25:59.056
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:25:59.057
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:26:08.624
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:26:08.625
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:26:08.626
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:26:08.747
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:26:08.749
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:26:08.750
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:39.285
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:27:39.287
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:27:39.288
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:43.173
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:27:43.174
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:27:43.174
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:43.420
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:27:43.421
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:27:43.421
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:52.164
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"       
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:27:52.164
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:27:52.165
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:53.065
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"      
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:27:53.065
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:27:53.066
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:53.579
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:27:53.580
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:27:53.580
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:27:56.875
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:27:56.875
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:27:56.876
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:00.224
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa            |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:00.225
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:00.226
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:02.473
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos | 4 - Sobremesa            |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:02.473
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:02.474
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:05.378
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos   | 4 - Sobremesa            |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:05.379
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:05.379
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:06.735
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa            |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:06.735
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:06.736
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:10.408
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:10.409
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:10.409
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:14.220
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:14.221
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:14.221
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:14.577
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:14.578
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:14.578
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:16.084
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		|       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:16.085
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:16.085
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:17.834
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:17.835
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:17.835
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:20.316
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		          |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:20.317
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:20.317
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:21.292
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:21.293
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:21.293
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:23.639
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:23.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:23.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:24.479
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:24.480
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:24.480
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:25.119
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:25.119
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:25.120
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:31.916
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:31.917
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:31.917
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:34.693
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas   | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:34.693
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:34.694
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:34.700
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas   | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
