!SESSION 2022-12-15 16:37:38.240 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

This is a continuation of log file C:\Users\atec\eclipse-workspace\PROJETO\.metadata\.bak_0.log
Created Time: 2022-12-15 18:28:34.701

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:34.702
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:34.709
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:34.805
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas    | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:34.806
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:34.806
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:34.813
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas    | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:34.813
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:34.813
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:36.111
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos       | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:36.112
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:36.112
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:39.684
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:39.684
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:39.685
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:43.581
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:43.582
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:43.582
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:44.884
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:44.884
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:44.885
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:46.170
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:46.170
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:46.171
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:46.906
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:46.907
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:46.907
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:48.151
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:48.152
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:48.152
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:53.804
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:53.805
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:53.805
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:55.042
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:28:55.044
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:28:55.044
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:479)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:406)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:365)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:286)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor57.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1262)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1542)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4867)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4745)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5028)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3643)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:28:57.447
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 18:28:57.447
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 18:28:57.448
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 18:29:02.174
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
				 + "║  1 - Cartao   2 - Encerrar Sessão");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                        ╔════════════════════╗                        \r\n"
				+ "                        ║ Escolha um Produto ║                        \r\n"
				+ "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "| 1 - Hambúrguer        | 2 - Bebidas        | 3 - Acompanhamentos    | 4 - Sobremesa      |\r\n"     
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝");
		
		           |       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     |
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - Mc Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - Mc BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - Mc CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - Mc Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - Mc Chesse 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println("╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 1 - Agua 1.50Є     ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 2 - CocaCola 2.40Є ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 3 - IceTea 2.20Є   ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 4 - Monster 3.20Є  ║\r\n"
						 + "                        ║                    ║\r\n"
						 + "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
						 + "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println("╔═════════════════════════════════════════════════════════════════════════════════╗\r\n"
				+ "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				+ "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Chesse     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Chesse    ", hamCHE);}
					else {System.out.printf(" %d Chesse   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.println("Preco Produto: "+produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.println("Preco Menu: "+menuPreco);
	    	}
	    	
	 
	    	System.out.println("Preco Total: "+totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	
		    	System.out.printf("PRECO TOTAL %f\nPAGOOOO\n",totalPreco);
		        cartao.balanco -= totalPreco;
		    	
		    	System.out.printf("Voce teve um desconto de: ",descontomenu - menuPreco);
		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 18:29:02.174
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 18:29:02.175
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.ui 4 4 2022-12-15 21:21:25.251
!MESSAGE Unable to create part
!STACK 1
org.eclipse.ui.PartInitException: The Class File Viewer cannot handle the given input ('org.eclipse.ui.part.FileEditorInput').
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3196)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3207)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:660)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:787)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:758)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:680)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:675)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.BasicPartList.gotoSelectedElement(BasicPartList.java:180)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.AbstractTableInformationControl.lambda$2(AbstractTableInformationControl.java:232)
	at org.eclipse.swt.events.MouseListener$3.mouseUp(MouseListener.java:114)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:224)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.core.runtime.CoreException: The Class File Viewer cannot handle the given input ('org.eclipse.ui.part.FileEditorInput').
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.doSetInput(ClassFileEditor.java:663)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3165)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3182)
	... 80 more
!SUBENTRY 1 org.eclipse.jdt.ui 4 996 2022-12-15 21:21:25.251
!MESSAGE The Class File Viewer cannot handle the given input ('org.eclipse.ui.part.FileEditorInput').
!STACK 1
org.eclipse.core.runtime.CoreException: The Class File Viewer cannot handle the given input ('org.eclipse.ui.part.FileEditorInput').
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor.doSetInput(ClassFileEditor.java:663)
	at org.eclipse.ui.texteditor.AbstractTextEditor.lambda$1(AbstractTextEditor.java:3165)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.texteditor.AbstractTextEditor.internalInit(AbstractTextEditor.java:3182)
	at org.eclipse.ui.texteditor.AbstractTextEditor.init(AbstractTextEditor.java:3207)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:353)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:344)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:995)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:659)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:763)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:728)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:712)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:105)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:183)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4792)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:234)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:660)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:787)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:758)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:680)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:675)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.BasicPartList.gotoSelectedElement(BasicPartList.java:180)
	at org.eclipse.e4.ui.internal.workbench.renderers.swt.AbstractTableInformationControl.lambda$2(AbstractTableInformationControl.java:232)
	at org.eclipse.swt.events.MouseListener$3.mouseUp(MouseListener.java:114)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:224)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4251)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SUBENTRY 2 org.eclipse.jdt.ui 4 996 2022-12-15 21:21:25.251
!MESSAGE The Class File Viewer cannot handle the given input ('org.eclipse.ui.part.FileEditorInput').
!SESSION 2022-12-15 22:45:20.256 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-15 22:45:26.705
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 22:45:26.705
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-15 22:45:26.705
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-15 22:45:30.657
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 23:27:18.953
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\r\n"
		    	         + "║     Conta      ║    Produtos   ║    Menu   ║    Carrinho    ║\r\n"
		    			 + "╚═════════════════════════════════════════════════════════════╝\r\n"
						 + "║                ║\r\n"
		    			 + "║╭────  1   ────╮║\r\n"
						 + "║|    Cartao    |║\r\n"
						 + "║╰──────────────╯║\r\n"
						 + "║                ║\r\n"
						 + "║╭────  2   ────╮║\r\n"
						 + "║ Encerrar Sessão║\r\n"
						 + "║╰──────────────╯║\r\n"
						 + "╚════════════════╝");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                         ╔══════════════════════════════════════════╗                       \r\n"
						 + "                         ║            Escolha um Produto            ║                       \r\n"
						 + "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "|    1 - Hambúrguer     |     2 - Bebidas    |  3 - Acompanhamentos   |   4 - Sobremesa    |\r\n"     
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝");
		
		           
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - TW Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - TW BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - TW CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - TW Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - TW Cheese 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 1 - Agua 1.50Є     ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 2 - CocaCola 2.40Є ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 3 - IceTea 2.20Є   ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 4 - Monster 3.20Є  ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
				+ "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Cheese     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Cheese    ", hamCHE);}
					else {System.out.printf(" %d Cheese   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
			System.out.print("━━━━━━━━━━━━┑");
			if (menuPreco > 0) System.out.print("╔──────────────────╗");
			if (produtoPreco > 0) System.out.print("╔──────────────────╗"); 
			if (totalPreco > 0) System.out.print("╔──────────────────╗"); 
			System.out.print("\n Preço      |");
			
			if (menuPreco > 0) {
				if (menuPreco < 10) {System.out.printf("| MENU: %.2f       |", menuPreco);}
				else if (menuPreco < 100) {System.out.printf("| MENU: %.2f      |", menuPreco);}
				else {System.out.printf("| MENU: %.2f     |", menuPreco);}
			}
			if (produtoPreco > 0) {
				if (produtoPreco < 10) {System.out.printf("| PODUTO: %.2f     |", produtoPreco);}
				else if (produtoPreco < 100) {System.out.printf("| PODUTO: %.2f    |", produtoPreco);}
				else {System.out.printf("| PODUTO: %.2f    |", produtoPreco);}
			}
			if (totalPreco > 0) {
				if (totalPreco < 10) {System.out.printf("| TOTAL: %.2f      |", totalPreco);}
				else if (totalPreco < 100) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
				else if (totalPreco < 1000) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
				else  (totalPreco < 1000) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
			}
			
			
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.printf("Preco Produto: %.2f\n",produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.printf("Preco Menu: %.2f\n",menuPreco);
	    	}
	    	
	 
	    	System.out.printf("Preco Total: %.2f\n",totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	char escolhaLimpar = ' ';
		    	
		    	if (cartao.balanco >= totalPreco) {
			    	System.out.printf("PRECO TOTAL %.2f\nPAGOOOO\n",totalPreco);
			        cartao.balanco -= totalPreco;
			    	
			    	System.out.printf("Voce teve um desconto de: %.2f\n",descontomenu - menuPreco);
		    		
		    	}
		    	else {
		    		System.out.println("Voce não tem dinheiro para completar a transação\nDeseja limpar o carrinho?\n [S]IM  [N]AO");
		    		do {
		    		Scanner entrada2 = new Scanner(System.in);   	
					escolhaLimpar  = entrada2.nextLine().charAt(0);
		    		
					if (escolhaLimpar == 'S' || escolhaLimpar == 's') {
		    			ham = 0; beb = 0; aco = 0; sob = 0; 
		    			hamM = 0;bebM = 0;acoM = 0;sobM = 0;menuPreco = 0;descontomenu = 0;
		    			hamCHI = 0; hamTAS = 0; hamCBO = 0; hamROY = 0; hamCHE = 0; // Quantidades separada de Hamburgers
		    			bebAGU = 0; bebCOL = 0; bebICE = 0; bebMON = 0; bebSUM = 0; // Quantidades separada de Bebida
		    			acBAT = 0; acSOP = 0; acSAL = 0; // Quantidades separada de Acompanhamento
		    			sobGEL = 0; sobCAF = 0; sobPAN = 0; // Quantidades separada de Sobremesa
		    		}
		    		else if (escolhaLimpar == 'N' || escolhaLimpar == 'n') {
		    			
		    		}
		    		else {
		    			System.out.println("Escolha de [S]im para limpar carrinho ou [N]ao para continuar com o carrinho cheio");escolhaLimpar = 'e';
		    		}
		    	}while (escolhaLimpar == 'e');
		    	}
		    	

		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-15 23:27:18.955
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-15 23:27:18.955
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:540)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-15 23:27:20.077
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.security.PublicKey;
import java.util.Scanner;


public abstract class Produto {
	
	
	int escolhaopcao = ' ', escolhahamburguer = ' ', escolhabebida = ' ', escolhaacompanhamento = ' ', escolhasobremesa = ' ',escolhaConta = ' ';
	int hamCHI = 0, hamTAS = 0, hamCBO = 0, hamROY = 0, hamCHE = 0; // Quantidades separada de Hamburgers
	int bebAGU = 0, bebCOL = 0, bebICE = 0, bebMON = 0, bebSUM = 0; // Quantidades separada de Bebida
	int acBAT = 0, acSOP = 0, acSAL = 0; // Quantidades separada de Acompanhamento
	int sobGEL = 0, sobCAF = 0, sobPAN = 0; // Quantidades separada de Sobremesa
	
	// Essencial <
	int menucont = 0; // Quantidades de menu
	double ham, beb, aco, sob; // Valor dos Produtos
	double hamM = 0, bebM = 0, acoM = 0, sobM = 0, descontomenu = 0; // Valor dos lanches do Menu
	double menuPreco = 0, produtoPreco = 0, totalPreco = 0;  // Preço final do menu
	// >
	
	// Apenas para fins visuais <
	int contvisuHam,h1=0,h2=0,h3=0,h4=0,h5=0;
	int contvisuBeb,b1=0,b2=0,b3=0,b4=0,b5=0;
	int contvisuAco,a1=0,a2=0,a3=0;
    int contvisuSob,s1=0,s2=0,s3=0;
    // >
    
    
    Autenticacao login = new Autenticacao();
    CreditCard cartao = new CreditCard ();
    
    public void LoginP() {
    	login.Login();
    	cartao.nomeCartao = login.nome1.toUpperCase();
    	cartao.Gerador();
    }
    
    public void CartaoP() {
    	System.out.println("╔═════════════════════════════════════════════════════════════╗\r\n"
		    	         + "║     Conta      ║    Produtos   ║    Menu   ║    Carrinho    ║\r\n"
		    			 + "╚═════════════════════════════════════════════════════════════╝\r\n"
						 + "║                ║\r\n"
		    			 + "║╭────  1   ────╮║\r\n"
						 + "║|    Cartao    |║\r\n"
						 + "║╰──────────────╯║\r\n"
						 + "║                ║\r\n"
						 + "║╭────  2   ────╮║\r\n"
						 + "║ Encerrar Sessão║\r\n"
						 + "║╰──────────────╯║\r\n"
						 + "╚════════════════╝");
    	Scanner entrada = new Scanner(System.in);  	
 		escolhaConta  = entrada.nextInt();
		switch (escolhaConta) {
		case 1:
    	cartao.Visualizar();
    	break;
		case 2:
	    	break;
		default:
			System.out.println("Opcao invalida");
    	}
    }
    
	public void inicio() {

		System.out.println("╔═════════════════════════════════════════════════════════════╗\n"
						 + "║  1 - Conta  ║  2 - Produtos  ║  3 - Menu  ║  4 - Carrinho   ║\n"
						 + "╚═════════════════════════════════════════════════════════════╝");
		Scanner entrada = new Scanner(System.in);   	
		escolhaopcao  = entrada.nextInt();
		
	}
	
	
	
	public void opcoes() {
	
		System.out.println("                         ╔══════════════════════════════════════════╗                       \r\n"
						 + "                         ║            Escolha um Produto            ║                       \r\n"
						 + "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
						 + "|    1 - Hambúrguer     |     2 - Bebidas    |  3 - Acompanhamentos   |   4 - Sobremesa    |\r\n"     
						 + "╚══════════════════════════════════════════════════════════════════════════════════════════╝");
		
		           
		
		
		
		
		Scanner entrada = new Scanner(System.in);   	
 		int escolha  = entrada.nextInt();
		switch (escolha) {
		case 1:
		hamburguerP();
		break;
		case 2:
		bebidaP();
		break;
		case 3:
		acompanhamentoP();
		break;
		case 4:
		sobremesaP();		
		break;
		
		}	
	}
	public void hamburguerP() {
	
		System.out.println(
				      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
				    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
				    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				    + "║                       ║\r\n"
				    + "║ 1 - TW Chicken 4.20Є  ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 2 - TW BigTasty 7.70Є ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 3 - TW CBO 6.00Є      ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 4 - TW Royal 5.20Є    ║\r\n"
				    + "║                       ║\r\n"
				    + "║ 5 - TW Cheese 4.20Є   ║\r\n"
				    + "╚═══════════════════════╝");
		
		Hamburguer c1 = new Hamburguer ();
		Scanner entrada = new Scanner(System.in);   	
		escolhahamburguer = entrada.nextInt();
		switch (escolhahamburguer) {
		case 1:
		c1.mcChicken();
		hamCHI += 1;
		ham += 4.20;
		break;
		case 2:
		c1.bigTasty();
		hamTAS += 1;
		ham += 7.70;
		break;
		case 3:
		c1.cbo();
		hamCBO += 1;
		ham += 6.00;
		break;
		case 4:
		c1.mcRoyal();
		hamROY += 1;
		ham += 5.20;
		break;
		case 5:
		c1.mcChese();
		hamCHE += 1;
		ham += 4.20;
		break;
		default:
				System.out.println("Você inseriu a opção errada");
		break;
			
		}	
		
	}
	
	
	
	public void bebidaP() {
 
		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 1 - Agua 1.50Є     ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 2 - CocaCola 2.40Є ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 3 - IceTea 2.20Є   ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 4 - Monster 3.20Є  ║\r\n"
				+ "                        ║                    ║\r\n"
				+ "                        ║ 5 - Sumo Nat 1.90Є ║\r\n"
				+ "                        ╚════════════════════╝");
		
		
		Bebidas c1 = new Bebidas ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhabebida  = entrada.nextInt();
		switch (escolhabebida) {
		case 1:
		c1.agua();
		bebAGU += 1;
		beb += 1.50;
		break;
		case 2:
		c1.colaCola();
		bebCOL += 1;
		beb += 2.40;
		break;
		case 3:
		c1.iceTea();
		bebICE += 1;
		beb += 2.20;
		break;
		case 4:
		c1.monster();
		bebMON += 1;
		beb += 3.20;
		break;
		case 5:
		c1.sumoNatural();
		bebSUM += 1;
		beb += 1.90;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}			
	}
	
	public void acompanhamentoP() {
		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 1 - Batata Frita 2.50Є ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 2 - Sopa 2.50Є         ║\r\n"
				+ "                                             ║                        ║\r\n"
				+ "                                             ║ 3 - Salada 2.50Є       ║\r\n"
				+ "                                             ╚════════════════════════╝");
		
		Acompanhamento c1 = new Acompanhamento ();
		Scanner entrada = new Scanner(System.in);   	
 		escolhaacompanhamento  = entrada.nextInt();
		switch (escolhaacompanhamento) {
		case 1:
		c1.batataFrita();
		acBAT += 1;
		aco = 2.50;
		break;
		case 2:
		c1.sopa();
		acSOP += 1;
		aco = 2.50;
		break;
		case 3:
		c1.salada();
		acSAL += 1;
		aco = 2.50;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
		}
	}
	
	public void sobremesaP() {

		System.out.println(
			      "╔══════════════════════════════════════════════════════════════════════════════════════════╗\r\n"
			    + "║       Hambúrguer      ║       Bebidas      ║     Acompanhamentos    ║      Sobremesa     ║\r\n"
			    + "╚══════════════════════════════════════════════════════════════════════════════════════════╝\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 1 - Gelado 1.00Є   ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 2 - Cafe 1.00Є     ║\r\n"
				+ "                                                                      ║                    ║\r\n"
				+ "                                                                      ║ 3 - Panqueca 1.00Є ║\r\n"
				+ "                                                                      ╚════════════════════╝");
		
		Sobremesa c1 = new Sobremesa();
		Scanner entrada = new Scanner(System.in);   	
		escolhasobremesa  = entrada.nextInt();
		switch (escolhasobremesa) {
		case 1:
		c1.gelado();
		sobGEL += 1;
		sob += 1;
		break;
		case 2:
		c1.cafe();
		sobCAF += 1;
		sob += 1;
		break;
		case 3:
		c1.panqueca();
		sobPAN += 1;
		sob += 1;
		break;
		default:
			System.out.println("Você inseriu a opção errada");
		break;
	
		}
		
	}
	public void PagamentoMenu() {

		
		produtoPreco = ham + beb + aco + sob;
		if (produtoPreco == 0 && menuPreco == 0) {
			System.out.printf("                 |￣￣￣￣￣￣￣￣|\r\n"
							+ "                 | Seu Carrinho |\r\n"
							+ "                 |  Está Vazio  |\r\n"
							+ "                 | ＿＿＿＿＿____|\r\n"
							+ "                 (\\__/) ||\r\n"
							+ "                 (•ㅅ•) ||\r\n"
							+ "                 / 　 づ\n");
					
		}
		
		
		if (produtoPreco > 0 || menuPreco > 0) {// Só passa se o cliente escolheu algo
			
			int visuHam = (hamCHI + hamTAS + hamCBO + hamROY + hamCHE);
	
			/*//TESTAR
			hamCHI = 33; hamTAS = 22;  hamROY = 22; hamCBO=3;hamCHE=4;
			bebAGU = 32; bebCOL = 32; bebSUM = 2;  bebMON=2; bebICE=3
			*/
			
			if (visuHam > 0) {
				System.out.print("━━━━━━━━━━━━┑");
				if (hamCHI > 0) { System.out.print("─────────────╮"); h1 = 1;}
				if (hamTAS > 0) { System.out.print("─────────────╮"); h2 = 1; ;}
				if (hamCBO > 0) { System.out.print("─────────────╮"); h3 = 1; ;}
				if (hamROY > 0) { System.out.print("─────────────╮"); h4 = 1; ;}
				if (hamCHE > 0) { System.out.print("─────────────╮"); h5 = 1; ;}
				System.out.print("\n Hambúrguers|");
				contvisuHam = h1+h2+h3+h4+h5;
				if (hamCHI > 0) {
					if (hamCHI < 10) {System.out.printf(" %d Chicken    ", hamCHI);}
					else if (hamCHI < 100) {System.out.printf(" %d Chicken   ", hamCHI);}
					else {System.out.printf(" %d Chicken  ", hamCHI);}
				}
				
				if (hamTAS > 0) {
					if (hamTAS < 10) {System.out.printf(" %d Tasty      ", hamTAS);}
					else if (hamTAS < 100) {System.out.printf(" %d Tasty     ", hamTAS);}
					else {System.out.printf(" %d Tasty    ", hamTAS);}
				}
				
				if (hamCBO > 0) {
					if (hamCBO < 10) {System.out.printf(" %d CBO        ", hamCBO);}
					else if (hamCBO < 100) {System.out.printf(" %d CBO       ", hamCBO);}
					else {System.out.printf(" %d CBO      ", hamCBO);}
				}
				if (hamROY > 0) {
					if (hamROY < 10) {System.out.printf(" %d Royal      ", hamROY);}
					else if (hamROY < 100) {System.out.printf(" %d Royal     ", hamROY);}
					else {System.out.printf(" %d Royal    ", hamROY);}
				}
				if (hamCHE > 0) {
					if (hamCHE < 10) {System.out.printf(" %d Cheese     ", hamCHE);}
					else if (hamCHE < 100) {System.out.printf(" %d Cheese    ", hamCHE);}
					else {System.out.printf(" %d Cheese   ", hamCHE);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (hamCHI > 0) {System.out.print("─────────────╯");};
				if (hamTAS > 0) {System.out.print("─────────────╯");};
				if (hamCBO > 0) {System.out.print("─────────────╯");};
				if (hamROY > 0) {System.out.print("─────────────╯");};
				if (hamCHE > 0) {System.out.print("─────────────╯");};
			}
			
			int visuBeb = (bebAGU + bebCOL + bebICE + bebMON + bebSUM); // Soma de todas as quantidade de bebida para a parte grafica
			
			if (visuBeb > 0) {
				if (bebAGU > 0)b1 = 1;if (bebCOL > 0)b2 = 1;if (bebICE > 0)b3 = 1;
				if (bebMON > 0)b4 = 1;if (bebSUM > 0)b5 = 1;
				
				contvisuBeb = (b1 + b2 + b3 + b4 + b5);
				

				System.out.print("\n━━━━━━━━━━━━┑");
				if (bebAGU > 0) System.out.print("─────────────╮");
				if (bebCOL > 0) System.out.print("─────────────╮"); 
				if (bebICE > 0) System.out.print("─────────────╮"); 
				if (bebMON > 0) System.out.print("─────────────╮"); 
				if (bebSUM > 0) System.out.print("─────────────╮"); 
					

				System.out.print("\n Bebidas    |");

				if (bebAGU > 0) {
					if (bebAGU < 10) {System.out.printf(" %d  Agua      ", bebAGU);}
					else if (bebAGU < 100) {System.out.printf(" %d  Agua     ", bebAGU);}
					else {System.out.printf(" %d Agua     ", bebAGU);}
				}
				
				if (bebCOL > 0) {
					if (bebCOL < 10) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else if (bebCOL < 100) {System.out.printf(" %d CocaCola  ", bebCOL);}
					else {System.out.printf(" %d CocaCola ", bebCOL);}
				}
				
				if (bebICE > 0) {
					if (bebICE < 10) {System.out.printf(" %d IceTea     ", bebICE);}
					else if (bebICE < 100) {System.out.printf(" %d IceTea    ", bebICE);}
					else {System.out.printf(" %d IceTea   ", bebICE);}
				}
				if (bebMON > 0) {
					if (bebMON < 10) {System.out.printf(" %d Monster    ", bebMON);}
					else if (bebMON < 100) {System.out.printf(" %d Monster   ", bebMON);}
					else {System.out.printf(" %d Monster  ", bebMON);}
				}
				if (bebSUM > 0) {
					if (bebSUM < 10) {System.out.printf(" %d Sumo       ", bebSUM);}
					else if (bebSUM < 100) {System.out.printf(" %d Sumo:     ", bebSUM);}
					else {System.out.printf(" %d Sumo     ", bebSUM);}
				}
				System.out.print("\n━━━━━━━━━━━━┙");
				if (bebAGU > 0) {System.out.print("─────────────╯");};
				if (bebCOL > 0) {System.out.print("─────────────╯");};
				if (bebICE > 0) {System.out.print("─────────────╯");};
				if (bebMON > 0) {System.out.print("─────────────╯");};
				if (bebSUM > 0) {System.out.print("─────────────╯");};
			}
			
			
			
			int visuAco = (acBAT + acSOP + acSAL);

			
			if (visuAco > 0) {
				
				if (acBAT > 0)a1 = 1;if (acSOP > 0)a2 = 1;if (acSAL > 0)a3 = 1;
				
				int contvisuAco = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (acBAT > 0) System.out.print("─────────────╮");
				if (acSOP > 0) System.out.print("─────────────╮"); 
				if (acSAL > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Acompanham/|");

				if (acBAT > 0) {
					if (acBAT < 10) {System.out.printf(" %d Batata F   ", acBAT);}
					else if (acBAT < 100) {System.out.printf(" %d Batata F  ", acBAT);}
					else {System.out.printf(" %d Batata F ", acBAT);}
				}
				
				if (acSOP > 0) {
					if (acSOP < 10) {System.out.printf(" %d Sopa       ", acSOP);}
					else if (acSOP < 100) {System.out.printf(" %d Sopa     ", acSOP);}
					else {System.out.printf(" %d Sopa     ", acSOP);}
				}
				
				if (acSAL > 0) {
					if (acSAL < 10) {System.out.printf(" %d Salada      ", acSAL);}
					else if (acSAL < 100) {System.out.printf(" %d Salada     ", acSAL);}
					else {System.out.printf(" %d Salada    ", acSAL);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (acBAT > 0) {System.out.print("─────────────╯");};
				if (acSOP > 0) {System.out.print("─────────────╯");};
				if (acSAL > 0) {System.out.print("─────────────╯");};
			}
			
		
		
			int visuSob = (sobGEL + sobCAF + sobPAN);
			
			
			if (visuSob > 0) {
				
				if (sobGEL > 0)a1 = 1;if (sobCAF > 0)a2 = 1;if (sobPAN > 0)a3 = 1;
				
				int contvisuSob = (a1 + a2 + a3);
				
			    System.out.print("\n━━━━━━━━━━━━┑");
				if (sobGEL > 0) System.out.print("─────────────╮");
				if (sobCAF > 0) System.out.print("─────────────╮"); 
				if (sobPAN > 0) System.out.print("─────────────╮"); 
				
			
				
				
				System.out.print("\n Sobremesa  |");
	
				if (sobGEL > 0) {
					if (sobGEL < 10) {System.out.printf(" %d Gelado     ", sobGEL);}
					else if (sobGEL < 100) {System.out.printf(" %d Gelado    ", sobGEL);}
					else {System.out.printf(" %d Gelado   ", sobGEL);}
				}
				
				if (sobCAF > 0) {
					if (sobCAF < 10) {System.out.printf(" %d Café       ", sobCAF);}
					else if (sobCAF < 100) {System.out.printf(" %d Café     ", sobCAF);}
					else {System.out.printf(" %d Café     ", sobCAF);}
				}
				
				if (sobPAN > 0) {
					if (sobPAN < 10) {System.out.printf(" %d Panqueca    ", sobPAN);}
					else if (sobPAN < 100) {System.out.printf(" %d Panqueca   ", sobPAN);}
					else {System.out.printf(" %d Panqueca  ", sobPAN);}
				}
				
				
				System.out.print("\n━━━━━━━━━━━━┙");
				if (sobGEL > 0) {System.out.print("─────────────╯");};
				if (sobCAF > 0) {System.out.print("─────────────╯");};
				if (sobPAN > 0) {System.out.print("─────────────╯");};
			}
			System.out.print("\n");
			
			System.out.print("━━━━━━━━━━━━┑");
			if (menuPreco > 0) System.out.print("╔──────────────────╗");
			if (produtoPreco > 0) System.out.print("╔──────────────────╗"); 
			if (totalPreco > 0) System.out.print("╔──────────────────╗"); 
			System.out.print("\n Preço      |");
			
			if (menuPreco > 0) {
				if (menuPreco < 10) {System.out.printf("| MENU: %.2f       |", menuPreco);}
				else if (menuPreco < 100) {System.out.printf("| MENU: %.2f      |", menuPreco);}
				else {System.out.printf("| MENU: %.2f     |", menuPreco);}
			}
			if (produtoPreco > 0) {
				if (produtoPreco < 10) {System.out.printf("| PODUTO: %.2f     |", produtoPreco);}
				else if (produtoPreco < 100) {System.out.printf("| PODUTO: %.2f    |", produtoPreco);}
				else {System.out.printf("| PODUTO: %.2f    |", produtoPreco);}
			}
			if (totalPreco > 0) {
				if (totalPreco < 10) {System.out.printf("| TOTAL: %.2f      |", totalPreco);}
				else if (totalPreco < 100) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
				else if (totalPreco < 1000) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
				else  (totalPreco < 1000) {System.out.printf("| TOTAL: %.2f     |", totalPreco);}
			}
			
			
			
	    	// Valor individual e total do produto e menu <
			produtoPreco = ham + beb + aco + sob; 
			totalPreco = menuPreco + produtoPreco;
			
			if (produtoPreco>0) {
	    		System.out.printf("Preco Produto: %.2f\n",produtoPreco);
	    	}
	  
	    	if (menuPreco>0) {
	    		System.out.printf("Preco Menu: %.2f\n",menuPreco);
	    	}
	    	
	 
	    	System.out.printf("Preco Total: %.2f\n",totalPreco);
	    	
			//  >
	    	
		    char escolhacarrinho;
			
			System.out.println("\nDeseja Finalizar a Compra [S]im ou [N]ao ?");
			do{
			Scanner entrada = new Scanner(System.in);   	
			escolhacarrinho  = entrada.nextLine().charAt(0);
			
			
		    if (escolhacarrinho == 's' || escolhacarrinho == 'S') {
		    	char escolhaLimpar = ' ';
		    	
		    	if (cartao.balanco >= totalPreco) {
			    	System.out.printf("PRECO TOTAL %.2f\nPAGOOOO\n",totalPreco);
			        cartao.balanco -= totalPreco;
			    	
			    	System.out.printf("Voce teve um desconto de: %.2f\n",descontomenu - menuPreco);
		    		
		    	}
		    	else {
		    		System.out.println("Voce não tem dinheiro para completar a transação\nDeseja limpar o carrinho?\n [S]IM  [N]AO");
		    		do {
		    		Scanner entrada2 = new Scanner(System.in);   	
					escolhaLimpar  = entrada2.nextLine().charAt(0);
		    		
					if (escolhaLimpar == 'S' || escolhaLimpar == 's') {
		    			ham = 0; beb = 0; aco = 0; sob = 0; 
		    			hamM = 0;bebM = 0;acoM = 0;sobM = 0;menuPreco = 0;descontomenu = 0;
		    			hamCHI = 0; hamTAS = 0; hamCBO = 0; hamROY = 0; hamCHE = 0; // Quantidades separada de Hamburgers
		    			bebAGU = 0; bebCOL = 0; bebICE = 0; bebMON = 0; bebSUM = 0; // Quantidades separada de Bebida
		    			acBAT = 0; acSOP = 0; acSAL = 0; // Quantidades separada de Acompanhamento
		    			sobGEL = 0; sobCAF = 0; sobPAN = 0; // Quantidades separada de Sobremesa
		    		}
		    		else if (escolhaLimpar == 'N' || escolhaLimpar == 'n') {
		    			
		    		}
		    		else {
		    			System.out.println("Escolha de [S]im para limpar carrinho ou [N]ao para continuar com o carrinho cheio");escolhaLimpar = 'e';
		    		}
		    	}while (escolhaLimpar == 'e');
		    	}
		    	

		    	}  
		    
		    else if (escolhacarrinho == 'n' || escolhacarrinho == 'N') {}
		    
		    else{System.out.println("Escolha [S] para finalizar a compra ou [N] para sair do carrinho"); escolhacarrinho = 'e';}
			
			}while (escolhacarrinho == 'e'); // Loop se o usuario não escolher entre [S] ou [N]
			
			
			
		}
		
			
			
	}
		    
	} 
	 


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-15 23:27:20.078
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-15 23:27:20.079
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2248)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3013)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-12-16 01:57:55.949 -----------------------------------------------
eclipse.buildId=4.25.0.I20220831-1800
java.version=17.0.5
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_PT
Framework arguments:  -product org.eclipse.epp.package.dsl.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.dsl.product

!ENTRY org.eclipse.jface 2 0 2022-12-16 01:58:01.386
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-16 01:58:01.386
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-16 01:58:01.386
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-12-16 01:58:04.176
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\atec'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2022-12-16 02:48:09.786
!MESSAGE Could not retrieve declared methods
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:237)
	at org.eclipse.jdt.internal.core.ClassFile.getJarBinaryTypeInfo(ClassFile.java:240)
	at org.eclipse.jdt.internal.core.ClassFile.getBinaryTypeInfo(ClassFile.java:201)
	at org.eclipse.jdt.internal.core.ClassFile.buildStructure(ClassFile.java:92)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.SourceRefElement.generateInfos(SourceRefElement.java:113)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.BinaryType.getElementInfo(BinaryType.java:288)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.createAnswer(SearchableEnvironment.java:235)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:186)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:515)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$0(LookupEnvironment.java:237)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:381)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:236)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:114)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:249)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveTypesFor(BinaryTypeBinding.java:1913)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.availableMethods(BinaryTypeBinding.java:434)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredMethods(TypeBinding.java:293)
	at org.eclipse.jdt.internal.corext.refactoring.surround.SurroundWithTryWithResourcesRefactoringCore.findAutocloseMethod(SurroundWithTryWithResourcesRefactoringCore.java:602)
	at org.eclipse.jdt.internal.ui.text.correction.QuickAssistProcessor.getTryWithResourceProposals(QuickAssistProcessor.java:3201)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.getTryWithResourceProposals(LocalCorrectionsSubProcessor.java:2499)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:914)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:360)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
